; Copyright 2025 Marc-Antoine Ruel
; https://github.com/maruel/bin_pub
;
; Configures git to a "rebase linearized history flow" where "one PR/CL equals one commit".
; This is in Chromium, Go and other projects that aims towards a linear commit history.
;
; Basic Usage:
;   git checkout -b my-branch origin/main
;   (do work)
;   git commit -am.
;   (do work)
;   git commit -am.
;   (do work)
;   git commit -am.
;   (when done)
;   git squash
;   git commit --amend  (set the actual commit message)
;   git push
;
; Multiple chained changes:
;   git checkout -b 1_work_A origin/main
;   (do work)
;   git commit -a -m "First commit"
;   git checkout -b 2_work_B 1_work_A
;   (do different work)
;   git commit -a -m "Second commit"
;
; When going back to update based on origin/main:
;   git checkout 1_work_A
;   git squash
;   git pull
;   git checkout 2_work_B
;   git pull
;
; Pro-tip:
; - Before a `git pull`, always `git squash` first! This means you will only have to do a merge conflict
;   resolution once.

[branch]
	autosetupmerge = always
	autosetuprebase = always
	sort = -committerdate

[pull]
	rebase = true

; These are designed to work on all OSes, including Windows.
[alias]
  ; Squash all the commits against the ancestor into a single commit
	squash = "!OLDLOG=$(git compact-log); git reset --soft $(git ancestor) && git commit -m \"$OLDLOG\""
  ; Smaller log against the ancestor; utility for `git squash`
	compact-log = !git log --pretty=format:\"%B\" $(git ancestor)..HEAD
  ; Returns the 'ancestor' hash at which the current branch is based on; utility for `git squash`
	ancestor = !git merge-base HEAD @{u}
