; General nicer UI with colors.
[color]
  ui = auto


; Super power git grep:
[grep]
  patternType = perl


; Only meaningful if you use HTTPS cookies authentication.
[http]
  cookiefile = ~/.config/git/cookies


; Make it work reasonably well on Windows. The auto-crlf breaks the file's hash,
; which can break things if you hash the file content outside of git, like for
; releases.
[core]
  autocrlf = false
  deltaBaseCacheLimit = 1G
  askpass = 
  precomposeunicode = true
  ; Requires https://github.com/dandavison/delta to be installed.
  pager = delta


; Requires https://github.com/dandavison/delta to be installed.
[interactive]
  diffFilter = delta --color-only

[delta]
  features = side-by-side line-numbers decorations
  whitespace-error-style = 22 reverse

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none


; Super power git mergetool. It starts vimdiff in 4 windows mode.
; The top panes are LOCAL, BASE, REMOTE.
; The bottom pane is the output file, with the merge conflict markers.
; Upon startup, a search for the first merge conflict marker is done to point
; the cursor at the right place. Then you can furiously press 'd' and down arrow
; to remove the unnecessary lines, then :wqa to move to the next file. Works
; great!
[merge]
  tool = vimdiff4way
[mergetool]
  prompt = false
  keepBackup = false
[mergetool "vimdiff4way"]
  cmd = vimdiff -c \"wincmd J\" -c \"0\" -c \"/<<<<<<< \" $MERGED $LOCAL $BASE $REMOTE


; Coupled with color.ui = auto above, makes git diff output nice. I recommend to
; set in bash the following alias:
;   alias diff="git diff --no-index --no-ext-diff --no-prefix"
[diff]
  tool = vimdiff
  noprefix = true


; May not be great ideas to set as default. I like to live dangerously.
[push]
  default = current
[gui]
  pruneduringfetch = true
[receive]
  denyCurrentBranch = warn


; Required to use a flow where "one PR/CL equals one named branch". This is
; explicitly using a "rebase flow" which is used in Chromium and other related
; projects that aims towards a linear commit history but less often used
; elsewhere.
[branch]
  autosetupmerge = always
  autosetuprebase = local
[pull]
  rebase = true


; My aliases.
; The most useful ones are: st, ci, co, br, sed, squash.
[alias]
  ; Shortcuts

  br = branch
  ci = commit
  co = checkout

  ; Querying

  ; status but don't look into submodules.
  st = status --ignore-submodule=all -sb
  ; diff against merge base using vimdiff.
  df = "!git difftool \"$(git ancestor)\" -- "
  ; log with patches until merge base.
  lp = "log -p @{u}.."
  ; Prints untracked files
  untracked = "!cd \"$(git rev-parse --show-cdup)\" && git clean -n -d | cut -c 14- | sed -e \"s/\\/$//\" | while read i; do echo /$i; done"
  ; Prints the repo's description if it exists.
  which = !cat $(git rev-parse --git-dir)/description
  ; Prints a graph about the current state of the branches
  confused = log --graph --decorate --pretty=format:\"%Cgreen%h%d %Cred%ad %Creset%s\" --branches --date-order --date=short --tags
  ; Returns the 'ancestor' hash at which the current branch is based on
  ancestor = !git merge-base HEAD @{u}
  ; Smaller log against the ancestor
  compact-log = !git log --pretty=format:\"%B\" $(git ancestor)..HEAD
  ; Blames against a branch given as an argument
  blamebranch = "!foo() { git diff --name-only \"$@\" | while read i; do git blame --date=short -C $i | cut -d '(' -f 2 | cut -d ' ' -f 1; done | sort -f | uniq -ic | sort -nr; }; foo"
  ; Blames against the 'upstream' branch
  blameup = !git blamebranch $(git ancestor)
  ; Blames a for a few files. The length of arguments is relatively limited, it'll
  ; fail after ~100 files or so, depending on the actual string (total file names)
  ; length.
  blamefiles = "!foo() { for i in \"$@\"; do git blame --date=short -C $i | cut -d '(' -f 2 | cut -d ' ' -f 1; done | sort -f | uniq -ic | sort -nr; }; foo"
  ; Generate a graph
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

  ; Editing

  ; Squash all the commits against the ancestor into a single commit
  squash = "!OLDLOG=$(git compact-log); git reset --soft $(git ancestor) && git commit -m \"$OLDLOG\""
  ; Run sed on all files
  sed = "!git ls-files -- . | xargs -L 1 sed -i"
  ; Delete branch
  bd = branch -D
  ; Add all untracked files to .git/info/exclude
  ignoreall = "!cd \"$(git rev-parse --show-cdup)\" && git clean -n -d | cut -c 14- | sed -e \"s/\\/$//\" >> $(git rev-parse --git-dir)/info/exclude"
  ; Rebase against the ancestor
  reroll = !git rebase -i $(git ancestor)
  ; TODO(maruel): How to not hardcode origin/master?
  new = "!f() { git fetch && git checkout -b $@ origin/master; }; f"


; Soon. Just need to finish some clean up first.
;[init]
;  defaultBranch = main


; Add user.name and user.email here.
