#!/usr/bin/env python
# Copyright 2014 Marc-Antoine Ruel. All Rights Reserved. Use of this
# source code is governed by a BSD-style license that can be found in the
# LICENSE file.

"""Prints statistics about the system's load sampled over a second.

This script is meant to be run periodically by tmux on the status line. It
samples output for a second. tmux handles slow processes on the status line just
fine.

Note: https://github.com/thewtex/tmux-mem-cpu-load is an alternative but it
didn't print out iostats out of the box. As a matter of fact, it's simpler to
run a script on all my systems than build it once for each. I'm _that_ lazy.
"""

import os
import subprocess
import sys


def osx():
  # Ignore anything other than the first drive. Fix this if this is a problem
  # for you.
  # TODO(maruel): It'd be nice to have the equivalent of ifstat. At that point,
  # it's probably worth rewritting in C++.
  stats = subprocess.check_output(['iostat', '-w', '1', '-n', '1', '-c', '2'])
  # KB/t tps MB/s us sy id 1m 5m 15m
  items = map(float, stats.splitlines()[-1].split())
  io_per_s = items[1]
  mb_per_s = items[2]
  cpu_usage = 100. - items[5]
  print('%5.1f%% %5.1fMB/s %4sIO/s' % (cpu_usage, mb_per_s, int(io_per_s)))


def linux():
  # iostat requires "sudo apt-get install systat".
  # ifstat requires "sudo apt-get install ifstat".
  proc_iostat = subprocess.Popen(
      ['iostat', '1', '-c', '2', '-d'], stdout=subprocess.PIPE,
      env={'LANG': 'en_US.UTF-8'})
  proc_ifstat = subprocess.Popen(
    ['ifstat', '-S', '1', '1'], stdout=subprocess.PIPE)

  iostat = proc_iostat.communicate()[0].splitlines()
  tps = 0.
  kb_s = 0.
  seen_device = False
  # Cheezy.
  for i in xrange(len(iostat)-1, -1, -1):
    line = iostat[i]
    if not line:
      continue
    if seen_device:
      cpu_usage = 100. - float(line.split()[-1])
      break
    if line.startswith('Device'):
      seen_device = True
      continue
    items = map(float, line.split()[1:])
    tps += items[0]
    kb_s += items[1]
    kb_s += items[2]

  # Sum all the networks, both inbound and outbound. It's really just to get a
  # rough idea of network usage.
  net_io_kb_s = sum(
      map(float, proc_ifstat.communicate()[0].splitlines()[-1].split()))
  print(
      '%4.1f%% %5.1fMB/s %4sIO/s %5sKB/s' %
      (cpu_usage, kb_s / 1024., int(tps), int(net_io_kb_s)))
  return


def main():
  if sys.platform == 'darwin':
    osx()
  else:
    linux()
  return 0


if __name__ == '__main__':
  sys.exit(main())
