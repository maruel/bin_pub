#!/usr/bin/env python
# Copyright 2014 Marc-Antoine Ruel. All Rights Reserved. Use of this
# source code is governed by a BSD-style license that can be found in the
# LICENSE file.

"""Prints statistics about the system's load sampled over a second.

This script is meant to be run periodically by tmux on the status line. It
samples output for a second. tmux handles slow processes on the status line just
fine.

Note: https://github.com/thewtex/tmux-mem-cpu-load is an alternative but it
didn't print out iostats out of the box. As a matter of fact, it's simpler to
run a script on all my systems than build it once for each. I'm _that_ lazy.
"""

import os
import subprocess
import sys


def osx():
  """Returns cpu_usage, disk_mb_per_s, disk_io_per_s, 0."""
  # Ignore anything other than the first drive. Fix this if this is a problem
  # for you.
  # TODO(maruel): It'd be nice to have the equivalent of ifstat. At that point,
  # it's probably worth rewritting in C++.

  stats = subprocess.check_output(['iostat', '-w', '1', '-n', '1', '-c', '2'])
  # KB/t tps MB/s us sy id 1m 5m 15m
  items = map(float, stats.splitlines()[-1].split())
  disk_io_per_s = items[1]
  disk_mb_per_s = items[2]
  cpu_usage = 100. - items[5]
  return cpu_usage, disk_mb_per_s, int(disk_io_per_s), 0


def linux():
  """Returns cpu_usage, disk_mb_per_s, disk_io_per_s, net_kb_per_s."""
  try:
    proc_iostat = subprocess.Popen(
        ['iostat', '1', '-c', '2', '-d'], stdout=subprocess.PIPE,
        env={'LANG': 'en_US.UTF-8'})
  except OSError:
    print('Run "sudo apt-get install sysstat ifstat"')
    return

  try:
    proc_ifstat = subprocess.Popen(
        ['ifstat', '-S', '1', '1'], stdout=subprocess.PIPE)
  except OSError:
    print('ifstat requires "sudo apt-get install ifstat"')
    return

  iostat = proc_iostat.communicate()[0].splitlines()
  disk_io_per_s = 0.
  disk_kb_per_s = 0.
  seen_device = False
  # Cheezy.
  for i in xrange(len(iostat)-1, -1, -1):
    line = iostat[i]
    if not line:
      continue
    if seen_device:
      v = line.split()[-1].strip('\x00')
      try:
        cpu_usage = 100. - float(v)
      except Exception as e:
        cpu_usage = 0.
      break
    if line.startswith('Device'):
      seen_device = True
      continue
    items = map(float, line.split()[1:])
    disk_io_per_s += items[0]
    disk_kb_per_s += items[1]
    disk_kb_per_s += items[2]

  # Sum all the networks, both inbound and outbound. It's really just to get a
  # rough idea of network usage.
  net_kb_per_s = sum(
      map(float, proc_ifstat.communicate()[0].splitlines()[-1].split()))
  return cpu_usage, disk_kb_per_s / 1024., int(disk_io_per_s), int(net_kb_per_s)


def main():
  colors = True
  tmux_status = 'TMUX' in os.environ and 'TMUX_PANE' not in os.environ
  if sys.platform == 'darwin':
    cpu_usage, disk_mb_per_s, disk_io_per_s, net_kb_per_s = osx()
  else:
    cpu_usage, disk_mb_per_s, disk_io_per_s, net_kb_per_s = linux()

  if tmux_status:
    print(
        '#[fg=colour58]%4.1f%%#[fg=colour52]%4.1fMB/s#[fg=colour94]%2sIO/s#[fg=colour8]%2sKB/s' %
        (cpu_usage, disk_mb_per_s, disk_io_per_s, net_kb_per_s))
  elif colors:
    print(
        '\033[31m%4.1f%%\033[32m%4.1fMB/s\033[33m%2sIO/s\033[34m%2sKB/s\033[0m' %
        (cpu_usage, disk_mb_per_s, disk_io_per_s, net_kb_per_s))
  else:
    print(
        '%4.1f%% %4.1fMB/s %2sIO/s %2sKB/s' %
        (cpu_usage, disk_mb_per_s, disk_io_per_s, net_kb_per_s))
  return 0


if __name__ == '__main__':
  sys.exit(main())
