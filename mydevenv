#!/bin/bash
# Copyright 2025 Marc-Antoine Ruel. All Rights Reserved. Use of this
# source code is governed by a BSD-style license that can be found in the
# LICENSE file.
#
# mydevenv: sets up a local dev environment with a local git clone for quick iteration.
#
# Assumptions:
# - only tested on ubuntu
# - sketch.dev was run on the system
# - nvim is configured
#
# A simplified version of https://github.com/boldsoftware/sketch/blob/main/loop/server/local_ssh.md but
# without the certification verification done properly yet.
#
# TODO:
# - Confirm ssh host key authentication.
# - Generate our own keys instead of relying on sketch.dev's keys.

set -euo pipefail

if [ ! -f $HOME/.config/sketch/container_user_identity ]; then
	echo "Run sketch from sketch.dev first to create the SSH keys" >&2
	echo "TODO: This is lazy, we could create them ourselves." >&2
	# ssh-keygen -t rsa -b 4096 -f container_ca
	# keygen -s container_ca -I "host_identifier" -h -n 127.0.0.1 container_server_identity.pub
	exit 1
fi
if [ ! -d $HOME/.claude ]; then
	mkdir $HOME/.claude
fi
if [ ! -d $HOME/.gemini ]; then
	mkdir $HOME/.gemini
fi
if [ ! -d $HOME/.qwen ]; then
	mkdir $HOME/.qwen
fi
GIT_CURRENT_BRANCH=$(git branch --show-current)
if [ -z "$GIT_CURRENT_BRANCH" ]; then
	echo "Check out a named branch" >&2
	exit 1
fi
GIT_ROOT_DIR=$(git rev-parse --show-toplevel)
GIT_USER_NAME="$(git config --get user.name)"
GIT_USER_EMAIL="$(git config --get user.email)"
CONTAINER_NAME="cli-$(basename $GIT_ROOT_DIR)"
IMAGE_NAME=mydevenv

if [ $# -gt 1 ]; then
    echo "Usage: $0 [container_name]" >&2
    exit 1
elif [ $# -eq 1 ]; then
    CONTAINER_NAME="$1"
fi

######

function build {
	ROOT=$(dirname $0)
	cd $ROOT/rsc

	echo "- Building Docker image ${IMAGE_NAME}.base ..."
	# TODO: Generate our own keys instead of relying on sketch.dev's keys.
	# TODO: Do not bake the keys in the image, load them on first run.
	rm -rf sketch
	mkdir sketch
	cp ~/.config/sketch/* sketch/
	cp ~/.config/sketch/*.* sketch/
	docker build -t ${IMAGE_NAME}.base -f Dockerfile.base .
	rm -rf sketch

	echo "- Building Docker image $IMAGE_NAME ..."
	# We could use ARGS ENV_FILE in there but the image would become specific to this repository.
	docker build -t $IMAGE_NAME .
	cd -
}

function run {
	docker rm -f $CONTAINER_NAME &>/dev/null || true
	echo "- Starting container $CONTAINER_NAME ..."
	# Port 3000 is mapped.
	docker run -d \
	  --name $CONTAINER_NAME \
	  -p 127.0.0.1:0:22 \
	  -p 127.0.0.1:3000:3000 \
	  -v ~/.claude/:/home/user/.claude/ \
	  -v ~/.gemini/:/home/user/.gemini/ \
	  -v ~/.qwen/:/home/user/.qwen/ \
	  $IMAGE_NAME

	PORT_NUMBER=$(docker inspect --format "{{(index .NetworkSettings.Ports \"22/tcp\" 0).HostPort}}" $CONTAINER_NAME)
	echo "- Found ssh port $PORT_NUMBER"
	echo "Host $CONTAINER_NAME" > ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  HostName 127.0.0.1" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  Port $PORT_NUMBER" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  User user" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  IdentityFile $HOME/.config/sketch/container_user_identity" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  CertificateFile /home/maruel/.config/sketch/host_cert" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  UserKnownHostsFile ~/.ssh/config.d/$CONTAINER_NAME.known_hosts" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	(echo -n "@cert-authority localhost,127.0.0.1,[::1] " && cat "$HOME/.config/sketch/container_ca.pub") > ~/.ssh/config.d/$CONTAINER_NAME.known_hosts
	#echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  StrictHostKeyChecking no" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	#echo "  HostbasedAuthentication yes" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	#echo "  EnableSSHKeysign yes" >> ~/.ssh/config.d/$CONTAINER_NAME.conf

	echo "- git clone into container ..."
	git remote rm $CONTAINER_NAME || true
	git remote add $CONTAINER_NAME user@$CONTAINER_NAME:/app || true
	# We need to loop until the container is up and running. It's quite fast but can take a few hundreds of
	# ms.
	while ! ssh $CONTAINER_NAME exit &>/dev/null; do
		sleep 0.1
	done
	git fetch $CONTAINER_NAME
	git push -q $CONTAINER_NAME HEAD:$GIT_CURRENT_BRANCH
	ssh $CONTAINER_NAME "cd /app && git checkout -q $GIT_CURRENT_BRANCH"
	if [ -f .env ]; then
		echo "- sending .env into container ..."
		scp .env $CONTAINER_NAME:/home/user/.env
	fi

	echo ""
	echo "When done:"
	echo "  docker rm -f $CONTAINER_NAME"
}

build
run

ssh $CONTAINER_NAME
