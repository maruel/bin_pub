#!/bin/bash
# Copyright 2025 Marc-Antoine Ruel. All Rights Reserved. Use of this
# source code is governed by a BSD-style license that can be found in the
# LICENSE file.
#
# mydevenv: sets up a local dev environment with a local git clone for quick iteration.
#
# Assumptions:
# - only tested on ubuntu
# - sketch.dev was run on the system
# - gemini cli was run on the system
# - nvim is configured
#
# A simplified version of https://github.com/boldsoftware/sketch/blob/main/loop/server/local_ssh.md but
# without the certification verification done properly yet.
#
# TODO:
# - Confirm ssh host key authentication.
# - Generate our own keys instead of relying on sketch.dev's keys.
# - Support multiple containers simultaneously.
# - Install a few Go tools.

set -euo pipefail

# Settings:
CONTAINER_NAME_PREFIX=cli-
BASE_IMAGE=debian:12.11
GO_VERSION=1.24.4


# Preflight checks:
if [ $# -ne 0 ]; then
	echo "Unexpected argument" >&2
	exit 1
fi
if [ ! -f $HOME/.config/sketch/container_user_identity ]; then
	echo "Run sketch from sketch.dev first to create the SSH keys" >&2
	echo "TODO: This is lazy, we could create them ourselves." >&2
	# ssh-keygen -t rsa -b 4096 -f container_ca
	# keygen -s container_ca -I "host_identifier" -h -n 127.0.0.1 container_server_identity.pub
	exit 1
fi
if [ ! -d $HOME/.gemini ]; then
	echo "Make sure to login to gemini if you want to use it" >&2
	mkdir $HOME/.gemini
fi
GIT_CURRENT_BRANCH=$(git branch --show-current)
if [ -z "$GIT_CURRENT_BRANCH" ]; then
	echo "Check out a named branch" >&2
	exit 1
fi
GIT_ROOT_DIR=$(git rev-parse --show-toplevel)
CONTAINER_NAME="${CONTAINER_NAME_PREFIX}$(basename $GIT_ROOT_DIR)"
GIT_USER_NAME="$(git config --get user.name)"
GIT_USER_EMAIL="$(git config --get user.email)"


# Common script to be used all the time.
SCRIPT=$(cat <<- EOF
	set -euo pipefail
	apt-get update -q -q
	apt-get install -q -q -y --no-install-recommends build-essential ca-certificates curl git less openssh-server rsync > /dev/null
	curl -sSL -o /root/.git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
	echo 'source /root/.git-completion.bash' >> /root/.bashrc
	echo 'source /etc/bash_completion.d/git-prompt' >> /root/.bashrc
	echo 'GIT_PS1_DESCRIBE_STYLE=tag' >> /root/.bashrc
	echo 'GIT_PS1_SHOWCOLORHINTS=1' >> /root/.bashrc
	echo 'GIT_PS1_SHOWDIRTYSTATE=1' >> /root/.bashrc
	echo 'GIT_PS1_SHOWSTASHSTATE=1' >> /root/.bashrc
	echo 'GIT_PS1_SHOWUNTRACKEDFILES=1' >> /root/.bashrc
	echo 'GIT_PS1_SHOWUPSTREAM=auto' >> /root/.bashrc
	echo 'function __my_ps1 {' >> /root/.bashrc
    echo '  __git_ps1 \\' >> /root/.bashrc
    echo '    "\\[\\e]0;\\W\\a\\]\\[\\e[0m\\]\\\$(_V=\\\$?; if [ \\\$_V != 0 ]; then echo -e -n \\"\\\\[\\\\e[36m\\\\]\\\$_V\\\\[\\\\e[0m\\\\]\\" ; fi)" \\' >> /root/.bashrc
	echo '    "\\[\\e[36m\\]\\w\\[\\e[0m\\]🐳 "' >> /root/.bashrc
	echo '}' >> /root/.bashrc
	echo 'PROMPT_COMMAND=__my_ps1' >> /root/.bashrc
	echo 'export LS_OPTIONS="--color=auto"' >> /root/.bashrc
	echo 'eval "\$(dircolors)"' >> /root/.bashrc
	echo "alias ls='ls \\\$LS_OPTIONS'" >> /root/.bashrc
	echo "alias ll='ls \\\$LS_OPTIONS -la'" >> /root/.bashrc
	mkdir -p /root/.local/bin
	echo 'export PATH="\$PATH:/root/.local/bin"' >> /root/.bashrc

	mkdir /root/.ssh 
	chmod 700 /root/.ssh 
	# TODO: Use strict host validation:
	echo 'StrictHostKeyChecking no' >> /root/.ssh/config
	echo 'PermitRootLogin prohibit-password' >> /etc/ssh/sshd_config
	echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config
	echo 'PubkeyAuthentication yes' >> /etc/ssh/sshd_config
	echo 'HostbasedAuthentication yes' >> /etc/ssh/sshd_config
	echo 'TrustedUserCAKeys /etc/ssh/container_ca.pub' >> /etc/ssh/sshd_config
	# Copy files instead of mounting so the ACL is good.
	cp /etc/ssh_src/container_user_identity.pub /root/.ssh/authorized_keys
	cp /etc/ssh_src/container_user_identity /root/.ssh/id_rsa
	cp /etc/ssh_src/container_user_identity.pub /root/.ssh/id_rsa.pub
	rm -f /etc/ssh/ssh_host_*_key /etc/ssh/ssh_host_*_key.pub
	cp /etc/ssh_src/container_server_identity /etc/ssh/ssh_host_rsa_key
	cp /etc/ssh_src/container_server_identity.pub /etc/ssh/ssh_host_rsa_key.pub
	cp /etc/ssh_src/container_ca.pub /etc/ssh/
	chmod 600 /root/.ssh/*.*
	echo 'Welcome to "$CONTAINER_NAME"!' > /etc/motd
	service ssh start

	curl -sSL -o- https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz | tar xz -C /opt --strip-component=1
	ln -s /opt/bin/nvim /usr/local/bin/nvim
	ln -s /opt/bin/nvim /usr/local/bin/vim
	ln -s /opt/bin/nvim /usr/local/bin/vi

	git config --global user.name "$GIT_USER_NAME"
	git config --global user.email "$GIT_USER_EMAIL"
	mkdir /app
	cd /app
	git init -q
	echo 'cd /app' >> /root/.bashrc
EOF
)

# Extras:
SCRIPT_EXTRAS=$(cat <<- EOF
	set -euo pipefail
	echo '- Installing node ...'
	curl -sSL -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | METHOD=script bash
	source \$HOME/.nvm/nvm.sh
	nvm install --no-progress node
	nvm use node

	echo ''
	echo '- Installing gemini CLI ...'
	npm install -g @google/gemini-cli
	echo "alias gemini='\$(which gemini) --yolo'" >> /root/.bashrc

	echo ''
	echo '- Installing claude CLI ...'
	npm install -g @anthropic-ai/claude-code
	claude config set --global preferredNotifChannel terminal_bell
	# echo "alias claude='\$(which claude) --dangerously-skip-permissions'" >> /root/.bashrc

	echo ''
	echo '- Installing Go ${GO_VERSION} ...'
	curl -sSL -o- https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz | tar -C /usr/local -xzf -
	echo 'export PATH="\$PATH:/usr/local/go/bin"' >> /root/.bashrc
EOF
)


######


function run {
	docker rm -f $CONTAINER_NAME &>/dev/null || true
	echo "- Starting container $CONTAINER_NAME ..."
	docker run -d \
	  --name $CONTAINER_NAME \
	  -p 127.0.0.1:0:22 \
	  -v ~/.config/sketch/container_user_identity.pub:/etc/ssh_src/container_user_identity.pub:ro \
	  -v ~/.config/sketch/container_user_identity:/etc/ssh_src/container_user_identity:ro \
	  -v ~/.config/sketch/container_server_identity:/etc/ssh_src/container_server_identity:ro \
	  -v ~/.config/sketch/container_server_identity.pub:/etc/ssh_src/container_server_identity.pub:ro \
	  -v ~/.config/sketch/container_ca.pub:/etc/ssh_src/container_ca.pub:ro \
	  -v ~/.gemini/:/root/.gemini/ \
	  $BASE_IMAGE bash -c "sleep infinity"

	PORT_NUMBER=$(docker inspect --format "{{(index .NetworkSettings.Ports \"22/tcp\" 0).HostPort}}" $CONTAINER_NAME)
	echo "Host $CONTAINER_NAME" > ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  HostName 127.0.0.1" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  Port $PORT_NUMBER" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  User root" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  IdentityFile $HOME/.config/sketch/container_user_identity" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  CertificateFile /home/maruel/.config/sketch/host_cert" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  UserKnownHostsFile ~/.ssh/config.d/$CONTAINER_NAME.known_hosts" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	(echo -n "@cert-authority localhost,127.0.0.1,[::1] " && cat "$HOME/.config/sketch/container_ca.pub") > ~/.ssh/config.d/$CONTAINER_NAME.known_hosts
	#echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	echo "  StrictHostKeyChecking no" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	#echo "  HostbasedAuthentication yes" >> ~/.ssh/config.d/$CONTAINER_NAME.conf
	#echo "  EnableSSHKeysign yes" >> ~/.ssh/config.d/$CONTAINER_NAME.conf

	docker exec -it $CONTAINER_NAME bash -c "$SCRIPT"

	echo "- git clone into container ..."
	git remote add $CONTAINER_NAME root@$CONTAINER_NAME:/app || true
	git fetch $CONTAINER_NAME
	git push -q $CONTAINER_NAME HEAD:$GIT_CURRENT_BRANCH
	ssh $CONTAINER_NAME "cd /app && git checkout -q $GIT_CURRENT_BRANCH"

	# Simpler to copy the files than trying to mount read-only.
	rsync -aq -W --zc=none --mkpath $HOME/.config/nvim/ $CONTAINER_NAME:/root/.config/nvim
	rsync -aq -W --zc=none --mkpath $HOME/.local/share/nvim/ $CONTAINER_NAME:/root/.local/share/nvim
	rsync -aq -W --zc=none --mkpath $HOME/.local/state/nvim/lazy/ $CONTAINER_NAME:/root/.local/state/nvim/lazy
	rsync -aq -W --zc=none --mkpath $HOME/go/bin/ $CONTAINER_NAME:/root/go/bin

	echo "- Installing extras ..."
	docker exec -it $CONTAINER_NAME bash -c "$SCRIPT_EXTRAS"

	echo ""
	echo "When done:"
	echo "  docker rm -f $CONTAINER_NAME"
}


run

ssh $CONTAINER_NAME
